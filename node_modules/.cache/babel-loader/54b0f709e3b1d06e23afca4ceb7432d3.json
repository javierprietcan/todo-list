{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\javie\\\\ultimate-todo-list-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"C:\\\\Users\\\\javie\\\\ultimate-todo-list-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Users\\\\javie\\\\ultimate-todo-list-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nimport uuid from \"uuid/v4\";\nexport default (function (initialTodos) {\n  var _useState = useState(initialTodos),\n      _useState2 = _slicedToArray(_useState, 2),\n      todos = _useState2[0],\n      setTodos = _useState2[1];\n\n  return {\n    todos: todos,\n    addTodo: function addTodo(newTodoText) {\n      setTodos([].concat(_toConsumableArray(todos), [{\n        id: uuid(),\n        task: newTodoText,\n        completed: false\n      }]));\n    },\n    removeTodo: function removeTodo(todoId) {\n      //filter out removed todo\n      var updatedTodos = todos.filter(function (todo) {\n        return todo.id !== todoId;\n      }); //call setTodos with new todos array\n\n      setTodos(updatedTodos);\n    },\n    toggleTodo: function toggleTodo(todoId) {\n      var updatedTodos = todos.map(function (todo) {\n        return todo.id === todoId ? _objectSpread({}, todo, {\n          completed: !todo.completed\n        }) : todo;\n      });\n      setTodos(updatedTodos);\n    },\n    editTodo: function editTodo(todoId, newTask) {\n      var updatedTodos = todos.map(function (todo) {\n        return todo.id === todoId ? _objectSpread({}, todo, {\n          task: newTask\n        }) : todo;\n      });\n      setTodos(updatedTodos);\n    }\n  };\n});","map":{"version":3,"sources":["C:\\Users\\javie\\ultimate-todo-list-app\\src\\hooks\\useTodoState.js"],"names":["useState","uuid","initialTodos","todos","setTodos","addTodo","newTodoText","id","task","completed","removeTodo","todoId","updatedTodos","filter","todo","toggleTodo","map","editTodo","newTask"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,gBAAe,UAAAC,YAAY,EAAI;AAAA,kBACHF,QAAQ,CAACE,YAAD,CADL;AAAA;AAAA,MACtBC,KADsB;AAAA,MACfC,QADe;;AAE7B,SAAO;AACLD,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,OAAO,EAAE,iBAAAC,WAAW,EAAI;AACtBF,MAAAA,QAAQ,8BAAKD,KAAL,IAAY;AAAEI,QAAAA,EAAE,EAAEN,IAAI,EAAV;AAAcO,QAAAA,IAAI,EAAEF,WAApB;AAAiCG,QAAAA,SAAS,EAAE;AAA5C,OAAZ,GAAR;AACD,KAJI;AAKLC,IAAAA,UAAU,EAAE,oBAAAC,MAAM,EAAI;AACpB;AACA,UAAMC,YAAY,GAAGT,KAAK,CAACU,MAAN,CAAa,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACP,EAAL,KAAYI,MAAhB;AAAA,OAAjB,CAArB,CAFoB,CAGpB;;AACAP,MAAAA,QAAQ,CAACQ,YAAD,CAAR;AACD,KAVI;AAWLG,IAAAA,UAAU,EAAE,oBAAAJ,MAAM,EAAI;AACpB,UAAMC,YAAY,GAAGT,KAAK,CAACa,GAAN,CAAU,UAAAF,IAAI;AAAA,eACjCA,IAAI,CAACP,EAAL,KAAYI,MAAZ,qBAA0BG,IAA1B;AAAgCL,UAAAA,SAAS,EAAE,CAACK,IAAI,CAACL;AAAjD,aAA+DK,IAD9B;AAAA,OAAd,CAArB;AAGAV,MAAAA,QAAQ,CAACQ,YAAD,CAAR;AACD,KAhBI;AAiBLK,IAAAA,QAAQ,EAAE,kBAACN,MAAD,EAASO,OAAT,EAAqB;AAC7B,UAAMN,YAAY,GAAGT,KAAK,CAACa,GAAN,CAAU,UAAAF,IAAI;AAAA,eACjCA,IAAI,CAACP,EAAL,KAAYI,MAAZ,qBAA0BG,IAA1B;AAAgCN,UAAAA,IAAI,EAAEU;AAAtC,aAAkDJ,IADjB;AAAA,OAAd,CAArB;AAGAV,MAAAA,QAAQ,CAACQ,YAAD,CAAR;AACD;AAtBI,GAAP;AAwBD,CA1BD","sourcesContent":["import { useState } from \"react\";\r\nimport uuid from \"uuid/v4\";\r\nexport default initialTodos => {\r\n  const [todos, setTodos] = useState(initialTodos);\r\n  return {\r\n    todos,\r\n    addTodo: newTodoText => {\r\n      setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\r\n    },\r\n    removeTodo: todoId => {\r\n      //filter out removed todo\r\n      const updatedTodos = todos.filter(todo => todo.id !== todoId);\r\n      //call setTodos with new todos array\r\n      setTodos(updatedTodos);\r\n    },\r\n    toggleTodo: todoId => {\r\n      const updatedTodos = todos.map(todo =>\r\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n      setTodos(updatedTodos);\r\n    },\r\n    editTodo: (todoId, newTask) => {\r\n      const updatedTodos = todos.map(todo =>\r\n        todo.id === todoId ? { ...todo, task: newTask } : todo\r\n      );\r\n      setTodos(updatedTodos);\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}